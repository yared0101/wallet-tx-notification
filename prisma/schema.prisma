// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int                   @id @default(autoincrement())
  account                  String                @unique
  lastTransactionTimeStamp String //only timestamp in naming, it is now tx hash
  nameTag                  String
  dataComplete             completeness
  pendingTransactions      PendingTransactions[]
  channel                  Channel[]
}

model PendingTransactions {
  id                    Int     @id @default(autoincrement())
  account               Account @relation(fields: [accountId], references: [id])
  transactionHash       String
  telegramSentMessageId Int
  accountId             Int

  @@unique([transactionHash, accountId])
}

model BlackListContracts {
  id            Int      @id @default(autoincrement())
  contractId    String
  name          String
  sellChannel   Channel? @relation(fields: [sellChannelId], references: [id], "sellBlacklist")
  sellChannelId Int?
  buyChannel    Channel? @relation(fields: [buyChannelId], references: [id], "buyBlacklist")
  buyChannelId  Int?
}

enum completeness {
  PENDING
  HALF
  COMPLETE
}

model time {
  id           Int     @id @default(autoincrement())
  totalTime    Int     @default(5)
  sendComplete Boolean @default(true)
}

enum CHANNEL_BLACK_LIST_TYPE {
  BLACKLIST
  WHITELIST
}

model Channel {
  id                   Int                     @id @default(autoincrement())
  name                 String
  description          String?
  channelId            String
  wallets              Account[]
  sendPending          Boolean                 @default(true)
  sendComplete         Boolean                 @default(true)
  sendBuyTx            Boolean                 @default(true)
  sendSellTx           Boolean                 @default(true)
  incomingTransfer     Boolean                 @default(true)
  outGoingTransfer     Boolean                 @default(true)
  blackListedTokens    BlackListContracts[]    @relation("sellBlacklist")
  buyBlackListedTokens BlackListContracts[]    @relation("buyBlacklist")
  minimumEther         Float?
  type                 CHANNEL_BLACK_LIST_TYPE @default(BLACKLIST)
}

model BlackListTokensForFiles {
  id         Int    @id @default(autoincrement())
  contractId String
  name       String
}
